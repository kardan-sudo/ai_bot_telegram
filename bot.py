"""–ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
import sys
import os
import asyncio
from telebot.async_telebot import AsyncTeleBot
from ai import fetch_models, TEXT_MODELS_URL, select_model_from_list, generate_text_with_model, IMAGE_MODELS_URL, generate_image_with_model
from button_cancel import CancelKeyboard


TOKEN="Your_TOKEN"

user_states = {}
user_models = {}

bot=AsyncTeleBot(token=TOKEN)

@bot.message_handler(commands=['start'])
async def start_message(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    user_states[message.chat.id] = {"state": "start"}
    user_name = message.from_user.first_name
    hello_text = f"""{user_name} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlyMalysh.ai! \
                     \n–ö—É–¥–∞ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É)? \n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ --- /text \
                         \n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ --- /photo \n"""
    await bot.send_message(message.chat.id,
                           hello_text)

@bot.message_handler(func=lambda message: message.text.lower() == "–æ—Ç–º–µ–Ω–∞ ‚ùå")
async def handle_cancel(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ"""
    await bot.send_message(
        message.chat.id,
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=CancelKeyboard.remove()
    )
    await bot.send_message(message.chat.id,
                           '–ö—É–¥–∞ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É)? \n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ --- /text\
                            \n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ --- /photo ')
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    del user_states[message.chat.id]["state"]

@bot.message_handler(commands=['text'])
async def view_text_model(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º"""  
    user_states[message.chat.id] = {"state": "wait_number_text_models"}
    text_models = fetch_models(TEXT_MODELS_URL)
    user_models[message.chat.id] = {'models_data' : text_models}
    if text_models:
        selected_text_model_details = select_model_from_list(text_models, "text")
        await bot.send_message(message.chat.id,
                               selected_text_model_details,
                               reply_markup=CancelKeyboard.create())
    else:
        await bot.send_message(message.chat.id,
                               "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.\
                                \n '–ö—É–¥–∞ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É)?\
                               \n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ --- /text \
                                \n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ --- /photo",
                                reply_markup=CancelKeyboard.remove())
        del user_states[message.chat.id]["state"]

@bot.message_handler(func=lambda message:
    user_states.get(message.chat.id, {}).get("state", {}) == "wait_number_text_models")
async def select_text_model(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    models_data = user_models.get(message.chat.id, {}).get("models_data")
    try:
        choice = int(message.text) - 1
        if 0 <= choice < len(models_data):
            user_states[message.chat.id] = {"state": "work_with_text_models"}
            user_models[message.chat.id] = {"select_model": models_data[choice]}
            msg = f"\n–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {models_data[choice]['name']} \
            ({models_data[choice]['description']}) \
            \n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            await bot.send_message(message.chat.id,
                                   msg,
                                   reply_markup=CancelKeyboard.create())
        else:
            await bot.send_message(message.chat.id,
                                   "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                                   reply_markup=CancelKeyboard.create())
    except ValueError:
        await bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                               reply_markup=CancelKeyboard.create())

@bot.message_handler(func=lambda message:
    user_states.get(message.chat.id, {}).get("state", {}) == "work_with_text_models")
async def work_text_model(message):
    """–§—É–∫–Ω—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    print(f'{message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª {message.text}')
    selected_text_model_details = user_models.get(message.chat.id, {}).get("select_model")
    if selected_text_model_details:
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...', 
                               reply_markup=CancelKeyboard.create())
        await bot.send_message(message.chat.id,
                               generate_text_with_model(selected_text_model_details, message.text),
                               reply_markup=CancelKeyboard.create())
        await bot.send_message(message.chat.id,
                               '–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å', 
                               reply_markup=CancelKeyboard.create())

@bot.message_handler(commands=['photo'])
async def view_photo_model(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""  
    user_states[message.chat.id] = {"state": "wait_number_photo_models"}
    photo_models = fetch_models(IMAGE_MODELS_URL)
    user_models[message.chat.id] = {'models_data' : photo_models}
    if photo_models:
        selected_text_model_details = select_model_from_list(photo_models, "image")
        await bot.send_message(message.chat.id,
                               selected_text_model_details,
                               reply_markup=CancelKeyboard.create())
    else:
        await bot.send_message(message.chat.id,
                               "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.\
                                \n '–ö—É–¥–∞ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É)?\
                               \n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ --- /text \
                                \n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ --- /photo",
                                reply_markup=CancelKeyboard.remove())
        del user_states[message.chat.id]["state"]

@bot.message_handler(func=lambda message:
    user_states.get(message.chat.id, {}).get("state", {}) == "wait_number_photo_models")
async def select_photo_model(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    models_data = user_models.get(message.chat.id, {}).get("models_data")
    print(models_data, type(models_data))
    try:
        choice = int(message.text) - 1
        print(choice)
        if 0 <= choice < len(models_data):
            user_states[message.chat.id] = {"state": "work_with_photo_models"}
            user_models[message.chat.id] = {"select_model": models_data[choice]}
            msg = f"\n–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {models_data[choice]}\
            \n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            await bot.send_message(message.chat.id,
                                   msg,
                                   reply_markup=CancelKeyboard.create())
        else:
            await bot.send_message(message.chat.id,
                                   "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                                   reply_markup=CancelKeyboard.create())
    except ValueError:
        await bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                               reply_markup=CancelKeyboard.create())

@bot.message_handler(func=lambda message:
    user_states.get(message.chat.id, {}).get("state", {}) == "work_with_photo_models")
async def work_photo_model(message):
    """–§—É–∫–Ω—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    print(f'{message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª {message.text}')
    selected_text_model_details = user_models.get(message.chat.id, {}).get("select_model")
    if selected_text_model_details:
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...', 
                               reply_markup=CancelKeyboard.create())
        filepath = generate_image_with_model(selected_text_model_details, prompt=message.text)
        try:
            with open(filepath, 'rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="–í–æ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ! üì∏",
                    reply_markup=CancelKeyboard.create()
                )
        except Exception as e:
            await bot.send_message(message.chat.id,
                               f'–û—à–∏–±–∫–∞, {e} –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! ', 
                               reply_markup=CancelKeyboard.create())

        await bot.send_message(message.chat.id,
                               '–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å', 
                               reply_markup=CancelKeyboard.create())

asyncio.run(bot.infinity_polling())
